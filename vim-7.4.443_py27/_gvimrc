set nocompatible

let mapleader=","

set encoding=utf-8
set renderoptions=type:directx
" Pro-tip:
"   conda install -c trent fontreg
"   conda install -c trent monaco-font
" Unfortunately, you need administrative privileges on Windows to install
" fonts, so you'll need to run those conda commands from an elevated
" cmd.exe prompt (Start->type `cmd`, hold ctrl-shift then hit enter).
try
    set guifont=Monaco:h10
catch
    set guifont=Consolas:h10
endtry

colorscheme Molokai

set background=dark
set autochdir
set smartcase
set autoindent
set ts=8 sw=4 sts=4 tw=78 expandtab
syntax on

" Format current paragraph or selection.
vmap Q gq
nmap Q gqap
" Step down wrapped multilines.
nnoremap j gj
nnoremap k gk

" Easy window navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Highlight trailing whitespace.
highlight ExtraWhitespace ctermbg=red guibg=LightRed
match ExtraWhitespace /\s\+$/
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" F4: remove all trailing whitespace.
map <F4> <ESC>:% s/\s\+$//ge<CR>

filetype on
filetype plugin on

hi LineNr guifg=LightGreen

set relativenumber
set number

set guioptions-=r
set guioptions-=L
set guioptions-=T


let g:is_unix=0
let g:is_cygwin=0
let g:is_windows=0
let g:is_darwin=0
let g:is_bash=1
let g:rundir=""
let g:appname='vim'
let g:viminfo_file='viminfo'
if has("unix")
    let g:is_unix=1
endif
if has("win32unix")
    let g:appname='vim.cygwin'
    let g:is_cygwin=1
    let g:viminfo_file='viminfo.cygwin'
elseif has("win32")
    let g:appname='vim.win32'
    source $VIMRUNTIME/mswin.vim
    let g:is_windows=1
endif

if has("gui_running")
    if has("gui_macvim")
        let g:appname='mac' . g:appname
    else
        let g:appname='g' . g:appname
    endif
endif

"----------------------------------------------------------------------------"
" spelling
"----------------------------------------------------------------------------"
au BufNewFile,BufRead *.txt,mutt*
    \ set spell spelllang=en_us ts=8 sw=4 sts=4 tw=72 expandtab

"----------------------------------------------------------------------------"
" default preferences for text files
"----------------------------------------------------------------------------"
au BufNewFile,BufRead *.txt set ts=8 sw=4 sts=4 tw=78 expandtab

au BufNewFile,BufRead *.py set ts=8 sw=4 sts=4 tw=78 expandtab

"----------------------------------------------------------------------------"
" paste-kludge and indent-toggle
"----------------------------------------------------------------------------"
nnoremap <F2> :set invpaste paste?<CR>
imap <F2> <C-O>:set invpaste paste?<CR>
set pastetoggle=<F2>

function! MyIndentToggle()
    if &expandtab
        let msg = "tab-8"
        set shiftwidth=8
        set softtabstop=0
        set noexpandtab
    else
        let msg = "space-4"
        set shiftwidth=4
        set softtabstop=4
        set expandtab
    endif
    echo "switching to " . msg
endfunction

map <F3> <ESC>:call MyIndentToggle()<CR>

"----------------------------------------------------------------------------"
" python stuff
"----------------------------------------------------------------------------"
runtime plugin/pythonhelper.vim
hi User1 term=reverse gui=reverse
if !exists("*TagInStatusLine")
    function TagInStatusLine()
        return ''
    endfunction
endif

runtime plugin/syntastic.vim
if !exists("*SyntasticStatuslineFlag")
    function! SyntasticStatuslineFlag()
        return ''
    endfunction
endif

if !exists("*haslocaldir")
    function! HasLocalDir()
        return ''
    endfunction
else
    function! HasLocalDir()
        if haslocaldir()
            return '[lcd]'
        endif
        return ''
    endfunction
endif

set statusline=                 " my status line contains:
set statusline+=%n:             " - buffer number, followed by a colon
set statusline+=%<%f            " - relative filename, truncated from the left
set statusline+=\               " - a space
set statusline+=%h              " - [Help] if this is a help buffer
set statusline+=%m              " - [+] if modified, [-] if not modifiable
set statusline+=%r              " - [RO] if readonly
set statusline+=%2*%{HasLocalDir()}%*           " [lcd] if :lcd has been used
set statusline+=%#warningmsg#%{SyntasticStatuslineFlag()}%*
set statusline+=\               " - a space
set statusline+=%1*%{TagInStatusLine()}%*       " [current class/function]
set statusline+=\               " - a space
set statusline+=%=              " - right-align the rest
set statusline+=%-10.(%l,%c%V%) " - line,column[-virtual column]
set statusline+=\               " - a space
set statusline+=%4L             " - total number of lines in buffer
set statusline+=\               " - a space
set statusline+=%P              " - position in buffer as percentage

" Other notes:
"   %1*         -- switch to highlight group User1
"   %{}         -- embed the output of a vim function
"   %*          -- switch to the normal highlighting
"   %=          -- right-align the rest
"   %-10.(...%) -- left-align the group inside %(...%)


"----------------------------------------------------------------------------"
" miscellaneous
"----------------------------------------------------------------------------"
set t_vb=
set showmatch
set showcmd
set ruler
set incsearch
set modeline
set modelines=5

" Try and make the backspace key behaviour suck less than usual.  For Windows,
" this is already taken care of for us by $VIMRUNTIME/mswin.vim.
if !g:is_windows
    set backspace=indent,eol,start whichwrap+=<,>,[,]
endif

if &term =~ 'xterm'
    if $COLORTERM == 'gnome-terminal'
        execute 'set t_kb=' . nr2char(8)
        fixdel
        set t_RV=
    elseif $COLORTERM == ''
        " Disabling the following as it's started breaking backspace behavior.
        "execute 'set t_kb=' . nr2char(8)
        "fixdel
    endif
endif

if g:is_darwin
    if g:hostname !~ 'viper.home.trent.me'
        set t_kb=
        fixdel
    endif

    " Don't clear the screen on exit.
    set t_ti=
    set t_te=
endif

if has("autocmd")
    autocmd FileType text setlocal textwidth=78
endif


runtime plugin/yankring.vim
nmap <script> <silent> <unique> <Leader>r :YRShow<CR>


set sessionoptions=unix,slash,blank,buffers,curdir,folds,globals,localoptions,options,tabpages,winpos,winsize

" vim:set ts=8 sw=4 sts=4 expandtab:
