package:
  name: tablib
  version: !!str 0.10.0

source:
  fn: tablib-0.10.0.tar.gz
  url: https://pypi.python.org/packages/source/t/tablib/tablib-0.10.0.tar.gz
  md5: 41fb8a731f6ef54812045ef9bf2909c6
#  patches:
   # List any patch files here
   # - fix.patch

# build:
  #preserve_egg_dir: True
  #entry_points:
    # Put any entry points (scripts to be generated automatically) here. The
    # syntax is module:function.  For example
    #
    # - tablib = tablib:main
    #
    # Would create an entry point called tablib that calls tablib.main()


  # If this is a new build for the same version, increment the build
  # number. If you do not include this key, it defaults to 0.
  # number: 1

requirements:
  build:
    - python
    - setuptools

  run:
    - python

test:
  # Python imports
  imports:
    - tablib
    - tablib.formats
    - tablib.packages
    - tablib.packages.odf
    - tablib.packages.odf3
    - tablib.packages.omnijson
    - tablib.packages.openpyxl
    - tablib.packages.openpyxl.reader
    - tablib.packages.openpyxl.shared
    - tablib.packages.openpyxl.writer
    - tablib.packages.openpyxl3
    - tablib.packages.openpyxl3.reader
    - tablib.packages.openpyxl3.shared
    - tablib.packages.openpyxl3.writer
    - tablib.packages.unicodecsv
    - tablib.packages.xlrd
      #    - tablib.packages.xlrd3
    - tablib.packages.xlwt
      #    - tablib.packages.xlwt3
    - tablib.packages.yaml
      #    - tablib.packages.yaml3

  #commands:
    # You can put test commands to be run here.  Use this to test that the
    # entry points work.


  # You can also put a file called run_test.py in the recipe that will be run
  # at test time.

  # requires:
    # Put any additional test requirements here.  For example
    # - nose

about:
  home: http://python-tablib.org
  license:  MIT License
  summary: 'Format agnostic tabular data library (XLS, JSON, YAML, CSV)'

# See
# http://docs.continuum.io/conda/build.html for
# more information about meta.yaml
